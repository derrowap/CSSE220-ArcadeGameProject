import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.Rectangle2D;

import javax.swing.JComponent;

public class WorldComponent extends JComponent implements Temporal {
	private static final int Min_Level = 1;
	private static final int Max_Level = 3;
	private static final Dimension SIZE = new Dimension(1080, 72 * 10);
	private static final Shape background = new Rectangle2D.Double(0, 0,
			SIZE.getWidth(), SIZE.getHeight());
	private static final Color bgColor = Color.gray;
	private World world;
	private int currentLevel;
	private static final int FRAMES_PER_SECOND = 30;
	private static final long REPAINT_INTERVAL_MS = 1000 / FRAMES_PER_SECOND;
	private boolean isPaused;

	public WorldComponent() {
		WorldKeyHandler keyListener = new WorldKeyHandler();
		addKeyListener(keyListener);
		setFocusable(true);
		this.currentLevel = 1;
		this.world = new World(this.currentLevel, 0);

		Runnable repainter = new Runnable() {
			public void run() {
				// Periodically asks Java to repaint this component
				try {
					while (true) {
						Thread.sleep(REPAINT_INTERVAL_MS);
						timePassed();
					}
				} catch (InterruptedException exception) {
					// Stop when interrupted
				}
			}
		};
		new Thread(repainter).start();
	}

	@Override
	protected void paintComponent(Graphics g) {
		// paints the background of the world
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D) g;
		g2.setColor(bgColor);
		g2.fill(background);
		this.world.drawOn(g2);
		this.world.timePassed();
	}

	@Override
	public Dimension getPreferredSize() {
		// returns the size of the WorldComponent
		return SIZE;
	}

	/*
	 * This KeyListener handles when to change levels and pause/restart the
	 * game, also to move the hero
	 */
	public class WorldKeyHandler implements KeyListener {
		// Pauses and resumes the game when P is pressed
		public void keyPressed(KeyEvent e) {
			if (WorldComponent.this.isPaused) {
				if (e.getKeyChar() == 'p') {
					WorldComponent.this
							.setIsPause(!WorldComponent.this.isPaused);
					WorldComponent.this.world
							.setIsPause(!WorldComponent.this.world.isPaused());
				}
			} else {

				// Pauses the game, not allowing any movement from any object in
				// World
				if (e.getKeyChar() == 'p') {
					WorldComponent.this
							.setIsPause(!WorldComponent.this.isPaused);
					WorldComponent.this.world
							.setIsPause(!WorldComponent.this.world.isPaused());

					// changes the level up or down when u and d are pressed
				} else if (e.getKeyChar() == 'u') {
					upLevel();
				} else if (e.getKeyChar() == 'd') {
					downLevel();

					// Sends the KeyCode to handleHero() to change direction of
					// hero
					// KeyCode 32 is space bar, which adds a bullet to the World
				} else if (e.getKeyCode() == 37 || e.getKeyCode() == 38
						|| e.getKeyCode() == 39 || e.getKeyCode() == 40
						|| e.getKeyCode() == 32) {
					handleHero(e.getKeyCode());
				} else {

					// Prints out to console any unknown key presses
					System.out.println("Unknown key code: " + e.getKeyCode());
				}
			}
		}

		
		public void keyTyped(KeyEvent e) {
			// not needed
		}

		
		public void keyReleased(KeyEvent arg0) {
			// not needed
		}
	}

	/*
	 * this is what moves the hero when pressing the arrow keys.
	 * 
	 * @keyCode is given from the key listener
	 */
	public void handleHero(int keyCode) {
		// Does not move anything if game is paused
		if (WorldComponent.this.isPaused) {
			return;
		}
		Hero hero = WorldComponent.this.world.getHero();
		if(!hero.getIsAlive()){
			return;
		}
		// Sets direction of the Hero
		if (keyCode == 37 && hero.getPosition().getY() % 72 == 0) {
			hero.setDirection('u');
		} else if (keyCode == 39 && hero.getPosition().getY() % 72 == 0) {
			hero.setDirection('d');
		} else if (keyCode == 38 && hero.getPosition().getX() % 72 == 0) {
			hero.setDirection('l');
		} else if (keyCode == 40 && hero.getPosition().getX() % 72 == 0) {
			hero.setDirection('r');
		}

		// Creates a bullet object (Hero's weapon) and
		// adds it to the objects to get repainted in the World
		if (keyCode == 32) {
			Bullet bullet = new Bullet(WorldComponent.this.world,
					hero.getPosition(), hero);
			this.world.addBullet(bullet);
			return;
		}

		// Moves the hero and adds a footprint every time he moves
		hero.move(hero.getDirection());
		if (!world.getTunnel().isInEmptySpace(hero)) {
			world.getFootprints().add(new FootPrint(world, hero.getPosition()));
		}
	}

	// Changes the level up one.
	// Called when the u button is pressed
	public void upLevel() {
		this.currentLevel += 1;
		if (this.currentLevel > WorldComponent.Max_Level) {
			this.currentLevel -=1;
			return;
		}
		this.world = new World(this.currentLevel, this.world.getHero().getScore());
	}

	// Changes the level down one
	// Called when the d button is pressed
	public void downLevel() {
		this.currentLevel -= 1;
		if (this.currentLevel < WorldComponent.Min_Level) {
			this.currentLevel +=1;
			return;
		}
		this.world = new World(this.currentLevel, this.world.getHero().getScore());
	}

	// Returns whether or no the game is currently paused
	public boolean isPaused() {
		return this.isPaused;
	}

	// Sets the game to be paused
	public void setIsPause(boolean isPaused) {
		this.isPaused = isPaused;
	}

	// Repaints the World component if it is not paused
	public void timePassed() {
		if (!this.isPaused) {
			repaint();
		}
		//check to see if any emeralds are in the blocks to move up a level
		for (ObjectInWorld block : this.world.getBlocks()) {
			if (block.getColor() == Color.GREEN){
				return;
			}
		}
		
		upLevel();
	}

	// sets the object to null and gets rid of it from the game.
	public void die() {
	}

	/**
	 * @return the world
	 */
	public World getWorld() {
		return this.world;
	}
	
	/**
	 * 
	 * @return the current level
	 */
	public int getLevel() {
		return this.currentLevel;
	}
	
}
