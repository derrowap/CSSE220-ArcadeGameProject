import java.awt.geom.Point2D;

public abstract class Character extends ObjectInWorld implements Movable {
	private double speed;
	protected char direction;
	protected boolean canDig;
	private boolean isAlive;

	public Character(World world, Point2D upLeftPoint) {
		super(world, upLeftPoint);
		isAlive = true;
	}

	// Moves the character the Point2D Point
	public void moveTo(Point2D Point) {
		this.setPosition(Point);
	}

	// Changes the value of the speed of the character
	public void setSpeed(double speed) {
		this.speed = speed;
	}

	// Returns the value of the character's speed
	public double getSpeed() {
		return this.speed;
	}

	/**
	 * Move to the next position according to the direction
	 * @param direction
	 */
	public void move(char direction) {
		Point2D newPoint = this.getPosition();
		if (direction == 'u') {
			newPoint = new Point2D.Double(this.getPosition().getX()
					- this.speed, this.getPosition().getY());		
		}
		if (direction == 'd') {
			newPoint = new Point2D.Double(this.getPosition().getX()
					+ this.speed, this.getPosition().getY());
		}
		if (direction == 'l') {
			newPoint = new Point2D.Double(this.getPosition().getX(), this
					.getPosition().getY() - this.speed);
		}
		if (direction == 'r') {
			newPoint = new Point2D.Double(this.getPosition().getX(), this
					.getPosition().getY() + this.speed);
		}
		if(direction == 's'){
			//
		}
		
		if (isAvailable(newPoint, this.getWorld())) {
			this.moveTo(newPoint);
		}
		
	}

	// Returns the char relating to the direction the character is currently facing
	public char getDirection() {
		return this.direction;
	}

	// Sets the direction that the character is facing
	public void setDirection(char c) {
		this.direction = c;
	}

	/**
	 * check whether the block(represent by its upperleft point) is inside the world
	 * @param upperLeft
	 * @param world
	 * @return
	 */
	public boolean isAvailable(Point2D upperLeft, World world) {
		Point2D upperRight = new Point2D.Double(upperLeft.getX(),
				upperLeft.getY() + 72);
		Point2D lowerLeft = new Point2D.Double(upperLeft.getX() + 72,
				upperLeft.getY());
		Point2D lowerRight = new Point2D.Double(upperLeft.getX() + 72,
				upperLeft.getY() + 72);
		return (world.includePoint(upperRight) && world.includePoint(upperLeft)
				&& world.includePoint(lowerLeft) && world
					.includePoint(lowerRight));
	}

	@Override
	public Point2D getGridPosition() {
		int thisx = (int) this.getPosition().getX();
		int thisy = (int) this.getPosition().getY();
		if(thisx % 72 == 0 && thisy % 72 ==0){
			return new Point2D.Double(thisx / 72, thisy / 72);
		}else{
			if(thisx % 72 !=0){
				if(this.getDirection() == 'u'){
					return new Point2D.Double((thisx/72) + 1, thisy/72);
				} else{
					return new Point2D.Double(thisx / 72, thisy / 72);
				}
			} else{
				if(this.getDirection() == 'l'){
					return new Point2D.Double(thisx / 72, (thisy / 72) + 1);
				}else{
					return new Point2D.Double(thisx / 72, thisy / 72);
				}
			}
		}
	}	
	
	/**
	 * get the character is alive or not
	 * @return
	 */
	public boolean getIsAlive(){
		return this.isAlive;
	}
	
	/**
	 * set the character is still alive or not
	 * @param isAlive
	 */
	public void setIsAlive(boolean isAlive){
		this.isAlive = isAlive;
	}
}
